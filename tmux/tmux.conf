# Set PATH so scripts can be run at session level.
set-environment -g PATH "$PATH:$HOME/.dotfiles/scripts"

# Enable keeping the X11 display in sync with the last attached TMUX client
set -g update-environment DISPLAY

# Enable Tmux handling of OSC52 Escape sequences
set -g set-clipboard on

## Tmux Plugins
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'


# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Set scrollback to 10000 lines
set -g history-limit 100000

# Make it pretty
set -g default-terminal "screen-256color"

# Start window number at 1, 0 is too far from the prefix
set -g base-index 1

# Set the path for new splits to be the path of the current pane
bind '%' split-window -h -c '#{pane_current_path}'  # Split panes horizontal
bind '"' split-window -v -c '#{pane_current_path}'  # Split panes vertically'"'

# Smart pane switching with awareness of Vim splits.
# See: https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Mouse settings!
set -g mouse on
#set -g mouse-resize-pane on
#set -g mouse-select-pane on
#set -g mouse-select-window on

# Mouse in tmux 2.1+
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# Set status bar
set -g status-bg black
set -g status-fg white
# Update in every 1 minute
set -g status-interval 60

# Status bar - right
# [Continuum Status][machine_name][session_name]
set -g status-right '#[fg=colour128,bold][âˆž:#{continuum_status}][H:#h]#[fg=colour200,bold][S:#S]'
set -g status-right-length 100

# Status bar - left side
# {Pane Title}{Date}
set -g status-left-length 60
set -g status-left ''

set-window-option -g mode-keys vi

# Auto rename window title to current program
set-window-option -g automatic-rename off
# You know what, NOBODY can rename windows, dammit.
set-window-option -g allow-rename off

# Copy pasting from terminal - need to enter 'copy mode' first - '<prefix> ['
unbind p
unbind-key -T copy-mode-vi v
bind p paste-buffer
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
#Blockwise copy mode:
bind-key -T copy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel 'yank > #{pane_tty}'

# Try copy-paste via terminal escape sequence, to work even over SSH.
# From https://sunaku.github.io/tmux-yank-osc52.html
# transfer copied text to attached terminal with yank:
# https://github.com/sunaku/home/blob/master/bin/yank"
#bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe -F 'yank > #{pane_tty}'

# transfer copied text to attached terminal with yank:
# https://github.com/sunaku/home/blob/master/bin/yank
#bind-key -n M-y run-shell -F 'tmux save-buffer - | yank > #{pane_tty}'

# transfer previously copied text (chosen from a menu) to attached terminal:
# https://github.com/sunaku/home/blob/master/bin/yank
#bind-key -n M-Y choose-buffer -F 'run-shell "tmux save-buffer -b \"%%\" - | yank > #{pane_tty}"'

# Reload key, reloads the configuration, handy
bind r source-file ~/.tmux.conf

set -g status-bg colour024
setw -g window-status-current-bg colour093

bind -n S-left  prev
bind -n S-right next
bind -n S-C-left  swap-window -t -1
bind -n S-C-right swap-window -t +1

bind -n M-F11 set -qg status-bg default
bind -n M-F12 set -qg status-bg colour024
bind -n S-up \
    send-keys M-F12 \; \
    set -qg status-bg default \; \
    unbind -n S-left \; \
    unbind -n S-right \; \
    unbind -n S-C-left \; \
    unbind -n S-C-right \; \
    unbind -n C-h \; \
    unbind -n C-j \; \
    unbind -n C-k \; \
    unbind -n C-l \; \
    unbind -n C-\ \; \
    unbind C-c \; \
    set -qg prefix C-a
bind -n S-down \
    send-keys M-F11 \; \
    set -qg status-bg colour024\; \
    bind -n S-left  prev \; \
    bind -n S-right next \; \
    bind -n S-C-left swap-window -t -1 \; \
    bind -n S-C-right swap-window -t +1 \; \
    bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L" \; \
    bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D" \; \
    bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U" \; \
    bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R" \; \
    bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l" \; \
    bind C-c new-window -a -c "#{pane_current_path}" \; \
    set -qg prefix C-b

# override tmux-yank copy program to use the yank script:
set -g @override_copy_command 'yank > #{pane_tty}'

# From https://wiki.archlinux.org/index.php/tmux#Clients_simultaneously_interacting_with_various_windows_of_a_session :
# It causes tmux to resize a window based on the smallest client actually viewing it, not on the smallest one attached to the entire session.
setw -g aggressive-resize on

# Enable Continuous TMUX
set -g @continuum-save-interval '15'
set -g @continuum-restore 'on'
set -g @resurrect-strategy-vim 'session'

# Source local overides
source -q ~/.dotfiles_local/tmux/tmux_extensions

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
